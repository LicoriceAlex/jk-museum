name: jk-museum-dev

services:
  db:
    image: postgres:15
    container_name: db
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    command: ["postgres",
      "-c", "shared_buffers=256MB",
      "-c", "effective_cache_size=1GB",
      "-c", "work_mem=16MB",
      "-c", "maintenance_work_mem=128MB"
    ]
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports: ["5432:5432"]
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB} -p 5432"]
      interval: 5s
      timeout: 5s
      retries: 10
    deploy:
      resources:
        limits:
          cpus: "1.0"
          memory: 1g
        reservations:
          memory: 512m

# Для стенда не нужен пг админ
#  pgadmin:
#    image: dpage/pgadmin4
#    container_name: pgadmin
#    environment:
#      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
#      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
#    ports: ["5050:80"]
#    depends_on:
#      db:
#        condition: service_healthy
#    deploy:
#      resources:
#        limits:
#          cpus: "0.30"
#          memory: 192m
#        reservations:
#          memory: 128m

  minio:
    image: minio/minio:latest
    container_name: minio
    environment:
      MINIO_ROOT_USER: ${MINIO_ACCESS_KEY}
      MINIO_ROOT_PASSWORD: ${MINIO_SECRET_KEY}
    volumes:
      - minio_data:/data
    command: ["server", "/data", "--console-address", ":9001"]
    ports: ["9000:9000", "9001:9001"]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: "0.70"
          memory: 384m
        reservations:
          memory: 256m

  backend:
    container_name: backend
    build:
      context: .
      dockerfile: ./backend/Dockerfile
      target: prod
    depends_on:
      db:
        condition: service_healthy
      minio:
        condition: service_healthy
    env_file: [.env.dev]
    ports: ["8000:8000"]
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8000${API_V1_STR:-/api/v1}/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
    labels:
      logging: "promtail"
      logging_jobname: "backend"
    deploy:
      resources:
        limits:
          cpus: "0.60"
          memory: 256m
        reservations:
          memory: 192m

  migrations:
    container_name: migrations
    build:
      context: .
      dockerfile: ./backend/Dockerfile
      target: migrations
    depends_on:
      db:
        condition: service_healthy
    env_file: [.env.dev]
    command: ["alembic", "upgrade", "head"]
    restart: "no"
    deploy:
      resources:
        limits:
          cpus: "0.25"
          memory: 128m
        reservations:
          memory: 64m

  frontend:
    container_name: frontend
    build:
      context: .
      dockerfile: ./frontend/Dockerfile
      args:
        - VITE_API_URL=${PUBLIC_API_URL}
    environment:
      - VITE_API_URL=${PUBLIC_API_URL}
    ports: ["3000:80"]
    depends_on:
      backend:
        condition: service_healthy
    deploy:
      resources:
        limits:
          cpus: "0.25"
          memory: 128m
        reservations:
          memory: 96m

volumes:
  postgres_data:
  minio_data: